// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// MetadataLibraryGenerator
// **************************************************************************

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:element_tree_console/src/generator/reflector.dart' as _i1;
import 'package:analyzer/dart/element/element.dart' as _i2;
import 'package:analyzer/src/generated/source.dart' as _i3;
import 'package:analyzer/src/generated/engine.dart' as _i4;
import 'package:analyzer/dart/analysis/session.dart' as _i5;
import 'package:pub_semver/src/version.dart' as _i6;
import 'package:analyzer/dart/element/type.dart' as _i7;
import 'package:analyzer/dart/constant/value.dart' as _i8;
import 'package:analyzer/source/line_info.dart' as _i9;
import 'package:analyzer/error/error.dart' as _i10;
import 'package:analyzer/src/generated/utilities_dart.dart' as _i11;
import 'package:analyzer/dart/analysis/features.dart' as _i12;
import 'package:analyzer/dart/element/scope.dart' as _i13;
import 'package:analyzer/dart/element/type_provider.dart' as _i14;
import 'package:analyzer/dart/element/type_system.dart' as _i15;
import 'package:analyzer/src/dart/resolver/scope.dart' as _i16;

final $reflectedElement = [
  _i1.ReflectItem<_i2.AugmentationImportElement>(properties: [
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement,
        _i2.LibraryOrAugmentationElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement,
        _i2.LibraryAugmentationElement?>(
      name: 'importedAugmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.importedAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, int>(
      name: 'importKeywordOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.importKeywordOffset,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i2.DirectiveUri>(
      name: 'uri',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.uri,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement,
        _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentationImportElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentationImportElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.AugmentationImportElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedClassElement>(properties: [
    _i1.ReflectSingleProperty<_i2.AugmentedClassElement, _i2.ClassElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedClassElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedClassElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement,
        _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedClassElement,
        _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedClassElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedClassElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedEnumElement>(properties: [
    _i1.ReflectSingleProperty<_i2.AugmentedEnumElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedEnumElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement,
        _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedEnumElement, _i2.InterfaceElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedEnumElement,
        _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedEnumElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedEnumElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedExtensionElement>(properties: [
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionElement,
        _i2.InstanceElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionElement,
        _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionElement,
        _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedExtensionTypeElement>(properties: [
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionTypeElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionTypeElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionTypeElement,
        _i2.InterfaceElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionTypeElement,
        _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedExtensionTypeElement,
        _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedExtensionTypeElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedInstanceElement>(properties: [
    _i1.ReflectIterableProperty<_i2.AugmentedInstanceElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInstanceElement,
        _i2.InstanceElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInstanceElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInstanceElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInstanceElement,
        _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInstanceElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInstanceElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInstanceElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedInterfaceElement>(properties: [
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInterfaceElement,
        _i2.InterfaceElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInterfaceElement,
        _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInterfaceElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInterfaceElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedInterfaceElement,
        _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedInterfaceElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.AugmentedMixinElement>(properties: [
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement, _i7.InterfaceType>(
      name: 'superclassConstraints',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.superclassConstraints,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement,
        _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedMixinElement, _i2.InterfaceElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedMixinElement,
        _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedMixinElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedMixinElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectIterableProperty<_i2.AugmentedMixinElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.AugmentedMixinElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.BindPatternVariableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement,
        _i2.JoinPatternVariableElement?>(
      name: 'join',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.join,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.BindPatternVariableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement,
        _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.BindPatternVariableElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.BindPatternVariableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.ClassElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.ClassElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.ClassElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.AugmentedClassElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasNonFinalField',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonFinalField,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isBase',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isBase,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isConstructable',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstructable,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isDartCoreEnum',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDartCoreEnum,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isDartCoreObject',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDartCoreObject,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isExhaustive',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExhaustive,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isInline',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInline,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isInterface',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInterface,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isMixinApplication',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isMixinApplication,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isMixinClass',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isMixinClass,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isValidMixin',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isValidMixin,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i7.InterfaceType>(
      name: 'allSupertypes',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.allSupertypes,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i7.InterfaceType?>(
      name: 'supertype',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.supertype,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i7.InterfaceType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.ClassElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ClassElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.ClassMemberElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.ClassMemberElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ClassMemberElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ClassMemberElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.CompilationUnitElement>(properties: [
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement, _i2.ClassElement>(
      name: 'classes',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.classes,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement,
        _i2.LibraryOrAugmentationElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement, _i2.EnumElement>(
      name: 'enums',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enums,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.ExtensionElement>(
      name: 'extensions',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.extensions,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.ExtensionTypeElement>(
      name: 'extensionTypes',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.extensionTypes,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.FunctionElement>(
      name: 'functions',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.functions,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i9.LineInfo>(
      name: 'lineInfo',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.lineInfo,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement, _i2.MixinElement>(
      name: 'mixins',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i5.AnalysisSession>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.TopLevelVariableElement>(
      name: 'topLevelVariables',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.topLevelVariables,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.TypeAliasElement>(
      name: 'typeAliases',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeAliases,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, String?>(
      name: 'uri',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.uri,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, int>(
      name: 'uriEnd',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.uriEnd,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, int>(
      name: 'uriOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.uriOffset,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.CompilationUnitElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.CompilationUnitElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.ConstructorElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ConstructorElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ConstructorElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ConstructorElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.InterfaceElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isDefaultConstructor',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDefaultConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isGenerative',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerative,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, int?>(
      name: 'nameEnd',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameEnd,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, int?>(
      name: 'periodOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.periodOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ConstructorElement?>(
      name: 'redirectedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.redirectedConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i7.InterfaceType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ConstructorElement?>(
      name: 'superConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.superConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectIterableProperty<_i2.ConstructorElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ConstructorElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'hasImplicitReturnType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitReturnType,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isAsynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAsynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isGenerator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerator,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isOperator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOperator,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isSynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynchronous,
    ),
    _i1.ReflectIterableProperty<_i2.ConstructorElement, _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.ConstructorElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ConstructorElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.DeferredImportElementPrefix>(properties: [
    _i1.ReflectSingleProperty<_i2.DeferredImportElementPrefix, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DeferredImportElementPrefix, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DeferredImportElementPrefix,
        _i2.PrefixElement>(
      name: 'element',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.element,
    ),
    _i1.ReflectSingleProperty<_i2.DeferredImportElementPrefix, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUri>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUri, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUri, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUri, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUriWithAugmentation>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation,
        _i2.LibraryAugmentationElement>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation, Uri>(
      name: 'relativeUri',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUri,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation, String>(
      name: 'relativeUriString',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUriString,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithAugmentation, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUriWithLibrary>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, Uri>(
      name: 'relativeUri',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUri,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, String>(
      name: 'relativeUriString',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUriString,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithLibrary, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUriWithRelativeUri>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUri, Uri>(
      name: 'relativeUri',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUri,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUri, String>(
      name: 'relativeUriString',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUriString,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUri, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUri, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUri, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUriWithRelativeUriString>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUriString, String>(
      name: 'relativeUriString',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUriString,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUriString, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUriString, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithRelativeUriString, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUriWithSource>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithSource, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithSource, Uri>(
      name: 'relativeUri',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUri,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithSource, String>(
      name: 'relativeUriString',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUriString,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithSource, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithSource, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithSource, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.DirectiveUriWithUnit>(properties: [
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit,
        _i2.CompilationUnitElement>(
      name: 'unit',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unit,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit, Uri>(
      name: 'relativeUri',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUri,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit, String>(
      name: 'relativeUriString',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.relativeUriString,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.DirectiveUriWithUnit, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.Element>(properties: [
    _i1.ReflectIterableProperty<_i2.Element, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.Element, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.Element, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.Element, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.Element, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.Element, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.Element, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.Element, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.Element, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.Element, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.Element, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.Element, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.Element, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.ElementAnnotation>(properties: [
    _i1.NullableReflectIterableProperty<_i2.ElementAnnotation,
        _i10.AnalysisError>(
      name: 'constantEvaluationErrors',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.constantEvaluationErrors,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, _i2.Element?>(
      name: 'element',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.element,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isImmutable',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isImmutable,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isJS,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isProxy',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isProxy,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isTarget',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isTarget,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, String>(
      name: 'toSource',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toSource(),
    ),
    _i1.ReflectSingleProperty<_i2.ElementAnnotation, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.ElementKind>(properties: [
    _i1.ReflectSingleProperty<_i2.ElementKind, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ElementKind, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ElementKind, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.ElementLocation>(properties: [
    _i1.ReflectIterableProperty<_i2.ElementLocation, String>(
      name: 'components',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.components,
    ),
    _i1.ReflectSingleProperty<_i2.ElementLocation, String>(
      name: 'encoding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.encoding,
    ),
    _i1.ReflectSingleProperty<_i2.ElementLocation, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ElementLocation, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ElementLocation, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.ElementVisitor>(properties: [
    _i1.ReflectSingleProperty<_i2.ElementVisitor, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ElementVisitor, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ElementVisitor, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.EnumElement>(properties: [
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.EnumElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.EnumElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.AugmentedEnumElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i7.InterfaceType>(
      name: 'allSupertypes',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.allSupertypes,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i7.InterfaceType?>(
      name: 'supertype',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.supertype,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i7.InterfaceType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.EnumElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.EnumElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.ExecutableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.ExecutableElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.ExecutableElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.ExecutableElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasImplicitReturnType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitReturnType,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isAsynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAsynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isGenerator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerator,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isOperator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOperator,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isSynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.ExecutableElement, _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.ExecutableElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.ExecutableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ExecutableElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ExecutableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.ExtensionElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.ExtensionElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.ExtensionElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement,
        _i2.AugmentedExtensionElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i7.DartType>(
      name: 'extendedType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.extendedType,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i7.DartType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.ExtensionTypeElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement,
        _i2.ExtensionTypeElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement,
        _i2.ExtensionTypeElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement,
        _i2.AugmentedExtensionTypeElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.ConstructorElement>(
      name: 'primaryConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.primaryConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.FieldElement>(
      name: 'representation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.representation,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i7.DartType>(
      name: 'typeErasure',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeErasure,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement, _i7.InterfaceType>(
      name: 'allSupertypes',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.allSupertypes,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement,
        _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i7.InterfaceType?>(
      name: 'supertype',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.supertype,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i7.InterfaceType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement,
        _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement,
        _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.ExtensionTypeElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ExtensionTypeElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.FieldElement>(properties: [
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.FieldElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.FieldElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.FieldElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isCovariant',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isCovariant,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isEnumConstant',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isEnumConstant,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isPromotable',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPromotable,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.FieldElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.FieldElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.PropertyAccessorElement?>(
      name: 'getter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.getter,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.PropertyAccessorElement?>(
      name: 'setter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.setter,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.FieldElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.FieldFormalParameterElement>(properties: [
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i2.FieldElement?>(
      name: 'field',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.field,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i2.ParameterElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, String?>(
      name: 'defaultValueCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.defaultValueCode,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasDefaultValue',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDefaultValue,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isCovariant',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isCovariant,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isInitializingFormal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInitializingFormal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNamed,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isOptional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptional,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isOptionalNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalNamed,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isOptionalPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalPositional,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPositional,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequired,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isRequiredNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequiredNamed,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isRequiredPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequiredPositional,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isSuperFormal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSuperFormal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i11.ParameterKind>(
      name: 'parameterKind',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.parameterKind,
    ),
    _i1.ReflectIterableProperty<_i2.FieldFormalParameterElement,
        _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectIterableProperty<_i2.FieldFormalParameterElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectIterableProperty<_i2.FieldFormalParameterElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.FieldFormalParameterElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.FieldFormalParameterElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.FunctionElement>(properties: [
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.FunctionElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.FunctionElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isDartCoreIdentical',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDartCoreIdentical,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isEntryPoint',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isEntryPoint,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.ExecutableElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasImplicitReturnType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitReturnType,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isAsynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAsynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isGenerator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerator,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isOperator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOperator,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isSynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionElement, _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.FunctionElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.FunctionTypedElement>(properties: [
    _i1.ReflectIterableProperty<_i2.FunctionTypedElement, _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionTypedElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionTypedElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.FunctionTypedElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.FunctionTypedElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.GenericFunctionTypeElement>(properties: [
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.GenericFunctionTypeElement,
        _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.GenericFunctionTypeElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement,
        _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.GenericFunctionTypeElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.GenericFunctionTypeElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.GenericFunctionTypeElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.HideElementCombinator>(properties: [
    _i1.ReflectIterableProperty<_i2.HideElementCombinator, String>(
      name: 'hiddenNames',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hiddenNames,
    ),
    _i1.ReflectSingleProperty<_i2.HideElementCombinator, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.HideElementCombinator, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.HideElementCombinator, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.ImportElementPrefix>(properties: [
    _i1.ReflectSingleProperty<_i2.ImportElementPrefix, _i2.PrefixElement>(
      name: 'element',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.element,
    ),
    _i1.ReflectSingleProperty<_i2.ImportElementPrefix, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ImportElementPrefix, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ImportElementPrefix, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.InstanceElement>(properties: [
    _i1.ReflectIterableProperty<_i2.InstanceElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.InstanceElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.InstanceElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement,
        _i2.AugmentedInstanceElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.InstanceElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.InstanceElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i7.DartType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.InstanceElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.InstanceElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.InstanceElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.InstanceElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.InterfaceElement>(properties: [
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i7.InterfaceType>(
      name: 'allSupertypes',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.allSupertypes,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.InterfaceElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement,
        _i2.AugmentedInterfaceElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i7.InterfaceType?>(
      name: 'supertype',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.supertype,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i7.InterfaceType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement,
        _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.InstanceElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.InterfaceElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.InterfaceElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.JoinPatternVariableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isConsistent',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConsistent,
    ),
    _i1.ReflectIterableProperty<_i2.JoinPatternVariableElement,
        _i2.PatternVariableElement>(
      name: 'variables',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.variables,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement,
        _i2.JoinPatternVariableElement?>(
      name: 'join',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.join,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.JoinPatternVariableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement,
        _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.JoinPatternVariableElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.JoinPatternVariableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.LabelElement>(properties: [
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.ExecutableElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.LabelElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LabelElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LabelElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LibraryAugmentationElement>(properties: [
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i2.LibraryOrAugmentationElement>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement,
        _i2.ExtensionElement>(
      name: 'accessibleExtensions',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessibleExtensions,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement,
        _i2.AugmentationImportElement>(
      name: 'augmentationImports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationImports,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i2.CompilationUnitElement>(
      name: 'definingCompilationUnit',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.definingCompilationUnit,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i12.FeatureSet>(
      name: 'featureSet',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.featureSet,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'isNonNullableByDefault',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNonNullableByDefault,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i2.LibraryLanguageVersion>(
      name: 'languageVersion',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.languageVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement,
        _i2.LibraryExportElement>(
      name: 'libraryExports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.libraryExports,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement,
        _i2.LibraryImportElement>(
      name: 'libraryImports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.libraryImports,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement,
        _i2.PrefixElement>(
      name: 'prefixes',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.prefixes,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i13.Scope>(
      name: 'scope',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.scope,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i5.AnalysisSession>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i14.TypeProvider>(
      name: 'typeProvider',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeProvider,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i15.TypeSystem>(
      name: 'typeSystem',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeSystem,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryAugmentationElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LibraryAugmentationElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LibraryElement>(properties: [
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.FunctionElement?>(
      name: 'entryPoint',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.entryPoint,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.LibraryElement>(
      name: 'exportedLibraries',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.exportedLibraries,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i16.Namespace>(
      name: 'exportNamespace',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.exportNamespace,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, String>(
      name: 'identifier',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.identifier,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.LibraryElement>(
      name: 'importedLibraries',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.importedLibraries,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isBrowserApplication',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isBrowserApplication,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isDartAsync',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDartAsync,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isDartCore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isDartCore,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isInSdk',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInSdk,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.FunctionElement>(
      name: 'loadLibraryFunction',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.loadLibraryFunction,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.PartElement>(
      name: 'parts',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parts,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i16.Namespace>(
      name: 'publicNamespace',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.publicNamespace,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.Element>(
      name: 'topLevelElements',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.topLevelElements,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.CompilationUnitElement>(
      name: 'units',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.units,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.ExtensionElement>(
      name: 'accessibleExtensions',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessibleExtensions,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement,
        _i2.AugmentationImportElement>(
      name: 'augmentationImports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationImports,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.CompilationUnitElement>(
      name: 'definingCompilationUnit',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.definingCompilationUnit,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i12.FeatureSet>(
      name: 'featureSet',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.featureSet,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isNonNullableByDefault',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNonNullableByDefault,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.LibraryLanguageVersion>(
      name: 'languageVersion',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.languageVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.LibraryExportElement>(
      name: 'libraryExports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.libraryExports,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.LibraryImportElement>(
      name: 'libraryImports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.libraryImports,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.PrefixElement>(
      name: 'prefixes',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.prefixes,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i13.Scope>(
      name: 'scope',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.scope,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i5.AnalysisSession>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i14.TypeProvider>(
      name: 'typeProvider',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeProvider,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i15.TypeSystem>(
      name: 'typeSystem',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeSystem,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LibraryElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LibraryExportElement>(properties: [
    _i1.ReflectIterableProperty<_i2.LibraryExportElement,
        _i2.NamespaceCombinator>(
      name: 'combinators',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.combinators,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.LibraryElement?>(
      name: 'exportedLibrary',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.exportedLibrary,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, int>(
      name: 'exportKeywordOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.exportKeywordOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.DirectiveUri>(
      name: 'uri',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.uri,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryExportElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryExportElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LibraryExportElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LibraryImportElement>(properties: [
    _i1.ReflectIterableProperty<_i2.LibraryImportElement,
        _i2.NamespaceCombinator>(
      name: 'combinators',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.combinators,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.LibraryElement?>(
      name: 'importedLibrary',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.importedLibrary,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, int>(
      name: 'importKeywordOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.importKeywordOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i16.Namespace>(
      name: 'namespace',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.namespace,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement,
        _i2.ImportElementPrefix?>(
      name: 'prefix',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.prefix,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.DirectiveUri>(
      name: 'uri',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.uri,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryImportElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryImportElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LibraryImportElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LibraryLanguageVersion>(properties: [
    _i1.ReflectSingleProperty<_i2.LibraryLanguageVersion, _i6.Version>(
      name: 'effective',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.effective,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryLanguageVersion, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryLanguageVersion, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryLanguageVersion, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.LibraryOrAugmentationElement>(properties: [
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement,
        _i2.ExtensionElement>(
      name: 'accessibleExtensions',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessibleExtensions,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement,
        _i2.AugmentationImportElement>(
      name: 'augmentationImports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationImports,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i2.CompilationUnitElement>(
      name: 'definingCompilationUnit',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.definingCompilationUnit,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i12.FeatureSet>(
      name: 'featureSet',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.featureSet,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'isNonNullableByDefault',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNonNullableByDefault,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i2.LibraryLanguageVersion>(
      name: 'languageVersion',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.languageVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement,
        _i2.LibraryExportElement>(
      name: 'libraryExports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.libraryExports,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement,
        _i2.LibraryImportElement>(
      name: 'libraryImports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.libraryImports,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement,
        _i2.PrefixElement>(
      name: 'prefixes',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.prefixes,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i13.Scope>(
      name: 'scope',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.scope,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i5.AnalysisSession>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i14.TypeProvider>(
      name: 'typeProvider',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeProvider,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i15.TypeSystem>(
      name: 'typeSystem',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.typeSystem,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LibraryOrAugmentationElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LibraryOrAugmentationElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LocalElement>(properties: [
    _i1.ReflectSingleProperty<_i2.LocalElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.LocalElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LocalElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LocalElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.LocalVariableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.LocalVariableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.LocalVariableElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.LocalVariableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.MethodElement>(properties: [
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.MethodElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.MethodElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.MethodElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectIterableProperty<_i2.MethodElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.MethodElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'hasImplicitReturnType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitReturnType,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isAsynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAsynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isGenerator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerator,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isOperator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOperator,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isSynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynchronous,
    ),
    _i1.ReflectIterableProperty<_i2.MethodElement, _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.MethodElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.MethodElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.MixinElement>(properties: [
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.MixinElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.MixinElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.AugmentedMixinElement?>(
      name: 'augmented',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmented,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'isBase',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isBase,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i7.InterfaceType>(
      name: 'superclassConstraints',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.superclassConstraints,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i7.InterfaceType>(
      name: 'allSupertypes',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.allSupertypes,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.ConstructorElement>(
      name: 'constructors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.constructors,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i7.InterfaceType>(
      name: 'interfaces',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.interfaces,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i7.InterfaceType>(
      name: 'mixins',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.mixins,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i7.InterfaceType?>(
      name: 'supertype',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.supertype,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i7.InterfaceType>(
      name: 'thisType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.thisType,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.ConstructorElement?>(
      name: 'unnamedConstructor',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.unnamedConstructor,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.PropertyAccessorElement>(
      name: 'accessors',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.accessors,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.FieldElement>(
      name: 'fields',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.fields,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.MethodElement>(
      name: 'methods',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.methods,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.MixinElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.MixinElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.MultiplyDefinedElement>(properties: [
    _i1.ReflectIterableProperty<_i2.MultiplyDefinedElement, _i2.Element>(
      name: 'conflictingElements',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.conflictingElements,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.MultiplyDefinedElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.MultiplyDefinedElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyDefinedElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.MultiplyInheritedExecutableElement>(properties: [
    _i1.ReflectIterableProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ExecutableElement>(
      name: 'inheritedElements',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.inheritedElements,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ExecutableElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ExecutableElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ExecutableElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasImplicitReturnType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitReturnType,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isAsynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAsynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isGenerator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerator,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isOperator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOperator,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isSynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.MultiplyInheritedExecutableElement,
        _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.NamespaceCombinator>(properties: [
    _i1.ReflectSingleProperty<_i2.NamespaceCombinator, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.NamespaceCombinator, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.NamespaceCombinator, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.ParameterElement>(properties: [
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.ParameterElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, String?>(
      name: 'defaultValueCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.defaultValueCode,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasDefaultValue',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDefaultValue,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isCovariant',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isCovariant,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isInitializingFormal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInitializingFormal,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNamed,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isOptional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptional,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isOptionalNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalNamed,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isOptionalPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalPositional,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPositional,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isRequiredNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequiredNamed,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isRequiredPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequiredPositional,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isSuperFormal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSuperFormal,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i11.ParameterKind>(
      name: 'parameterKind',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.parameterKind,
    ),
    _i1.ReflectIterableProperty<_i2.ParameterElement, _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectIterableProperty<_i2.ParameterElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.ParameterElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.ParameterElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.ParameterElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.PartElement>(properties: [
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.DirectiveUri>(
      name: 'uri',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.uri,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.PartElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.PartElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.PartElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.PatternVariableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.PatternVariableElement,
        _i2.JoinPatternVariableElement?>(
      name: 'join',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.join,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.PatternVariableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.PatternVariableElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.PatternVariableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.PrefixElement>(properties: [
    _i1.ReflectSingleProperty<_i2.PrefixElement,
        _i2.LibraryOrAugmentationElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectIterableProperty<_i2.PrefixElement, _i2.LibraryImportElement>(
      name: 'imports',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.imports,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i13.Scope>(
      name: 'scope',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.scope,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.PrefixElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.PrefixElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.PrefixElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.PromotableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.PromotableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.PromotableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.PromotableElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.PromotableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.PropertyAccessorElement>(properties: [
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.PropertyAccessorElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.PropertyAccessorElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.PropertyAccessorElement?>(
      name: 'correspondingGetter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.correspondingGetter,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.PropertyAccessorElement?>(
      name: 'correspondingSetter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.correspondingSetter,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.PropertyAccessorElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i2.Element>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isGetter',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGetter,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isSetter',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSetter,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.PropertyInducingElement>(
      name: 'variable',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.variable,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasImplicitReturnType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitReturnType,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isAbstract',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAbstract,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isAsynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAsynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isGenerator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isGenerator,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isOperator',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOperator,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isSynchronous',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynchronous,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectIterableProperty<_i2.PropertyAccessorElement,
        _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i7.DartType>(
      name: 'returnType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.returnType,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i7.FunctionType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.PropertyAccessorElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.PropertyAccessorElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.PropertyAccessorElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.PropertyAccessorElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.PropertyInducingElement>(properties: [
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement,
        _i2.PropertyInducingElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement,
        _i2.PropertyInducingElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement,
        _i2.PropertyAccessorElement?>(
      name: 'getter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.getter,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement,
        _i2.PropertyAccessorElement?>(
      name: 'setter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.setter,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i2.VariableElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectIterableProperty<_i2.PropertyInducingElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.PropertyInducingElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
    _i1.ReflectSingleProperty<_i2.PropertyInducingElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.ShowElementCombinator>(properties: [
    _i1.ReflectSingleProperty<_i2.ShowElementCombinator, int>(
      name: 'end',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.end,
    ),
    _i1.ReflectSingleProperty<_i2.ShowElementCombinator, int>(
      name: 'offset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.offset,
    ),
    _i1.ReflectIterableProperty<_i2.ShowElementCombinator, String>(
      name: 'shownNames',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.shownNames,
    ),
    _i1.ReflectSingleProperty<_i2.ShowElementCombinator, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.ShowElementCombinator, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.ShowElementCombinator, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
  _i1.ReflectItem<_i2.SuperFormalParameterElement>(properties: [
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i2.ParameterElement?>(
      name: 'superConstructorParameter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.superConstructorParameter,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i2.ParameterElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, String?>(
      name: 'defaultValueCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.defaultValueCode,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasDefaultValue',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDefaultValue,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isCovariant',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isCovariant,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isInitializingFormal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isInitializingFormal,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNamed,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isOptional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptional,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isOptionalNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalNamed,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isOptionalPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isOptionalPositional,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPositional,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequired,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isRequiredNamed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequiredNamed,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isRequiredPositional',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isRequiredPositional,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isSuperFormal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSuperFormal,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i11.ParameterKind>(
      name: 'parameterKind',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.parameterKind,
    ),
    _i1.ReflectIterableProperty<_i2.SuperFormalParameterElement,
        _i2.ParameterElement>(
      name: 'parameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.parameters,
    ),
    _i1.ReflectIterableProperty<_i2.SuperFormalParameterElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectIterableProperty<_i2.SuperFormalParameterElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.SuperFormalParameterElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
    _i1.ReflectSingleProperty<_i2.SuperFormalParameterElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
  ]),
  _i1.ReflectItem<_i2.TopLevelVariableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i2.TopLevelVariableElement?>(
      name: 'augmentation',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentation,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i2.TopLevelVariableElement?>(
      name: 'augmentationTarget',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.augmentationTarget,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i2.TopLevelVariableElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isExternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isExternal,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i2.PropertyAccessorElement?>(
      name: 'getter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.getter,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasInitializer',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInitializer,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isAugmentation',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isAugmentation,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i2.PropertyAccessorElement?>(
      name: 'setter',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.setter,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectIterableProperty<_i2.TopLevelVariableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.TopLevelVariableElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
    _i1.ReflectSingleProperty<_i2.TopLevelVariableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.TypeAliasElement>(properties: [
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.Element?>(
      name: 'aliasedElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.aliasedElement,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i7.DartType>(
      name: 'aliasedType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.aliasedType,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.CompilationUnitElement>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.TypeAliasElement, _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.TypeAliasElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.TypeAliasElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.TypeAliasElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.TypeDefiningElement>(properties: [
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.TypeDefiningElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.TypeDefiningElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.TypeDefiningElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.TypeParameterElement>(properties: [
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i7.DartType?>(
      name: 'bound',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.bound,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement,
        _i2.TypeParameterElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.TypeParameterElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.TypeParameterElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.TypeParameterizedElement>(properties: [
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'isSimplyBounded',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSimplyBounded,
    ),
    _i1.ReflectIterableProperty<_i2.TypeParameterizedElement,
        _i2.TypeParameterElement>(
      name: 'typeParameters',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.typeParameters,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.TypeParameterizedElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement,
        _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement,
        _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.TypeParameterizedElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement,
        _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.TypeParameterizedElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.UndefinedElement>(properties: [
    _i1.ReflectSingleProperty<_i2.UndefinedElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.UndefinedElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.Element?>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.UndefinedElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.UndefinedElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.UriReferencedElement>(properties: [
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, String?>(
      name: 'uri',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.uri,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, int>(
      name: 'uriEnd',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.uriEnd,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, int>(
      name: 'uriOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.uriOffset,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.Element>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.LibraryElement>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i3.Source>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i3.Source>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectIterableProperty<_i2.UriReferencedElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.UriReferencedElement,
        _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, String?>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.UriReferencedElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i2.VariableElement>(properties: [
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.VariableElement>(
      name: 'declaration',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.declaration,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasImplicitType',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasImplicitType,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isConst',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConst,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isFinal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isFinal,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isLate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isLate,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isStatic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isStatic,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, String>(
      name: 'name',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.name,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i7.DartType>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectIterableProperty<_i2.VariableElement, _i2.Element>(
      name: 'children',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.children,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i4.AnalysisContext>(
      name: 'context',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.context,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, String>(
      name: 'displayName',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.displayName,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, String?>(
      name: 'documentationComment',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.documentationComment,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.Element?>(
      name: 'enclosingElement',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.enclosingElement,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasAlwaysThrows',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasAlwaysThrows,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasDeprecated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDeprecated,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasDoNotStore',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasDoNotStore,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasFactory',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasFactory,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasInternal',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasInternal,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasIsTest',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTest,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasIsTestGroup',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasIsTestGroup,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasJS',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasJS,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasLiteral',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasLiteral,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasMustBeOverridden',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustBeOverridden,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasMustCallSuper',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasMustCallSuper,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasNonVirtual',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasNonVirtual,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasOptionalTypeArgs',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOptionalTypeArgs,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasOverride',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasOverride,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasProtected',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasProtected,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasRedeclare',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRedeclare,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasReopen',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasReopen,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasRequired',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasRequired,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasSealed',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasSealed,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasUseResult',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasUseResult,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasVisibleForOverriding',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForOverriding,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasVisibleForTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasVisibleForTesting',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleForTesting,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'hasVisibleOutsideTemplate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasVisibleOutsideTemplate,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, int>(
      name: 'id',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.id,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isPrivate',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPrivate,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isPublic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isPublic,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isSynthetic',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.ElementKind>(
      name: 'kind',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.kind,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.LibraryElement?>(
      name: 'library',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.library,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.ElementLocation?>(
      name: 'location',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.location,
    ),
    _i1.ReflectIterableProperty<_i2.VariableElement, _i2.ElementAnnotation>(
      name: 'metadata',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.metadata,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, int>(
      name: 'nameLength',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameLength,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, int>(
      name: 'nameOffset',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.nameOffset,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.Element>(
      name: 'nonSynthetic',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.nonSynthetic,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i5.AnalysisSession?>(
      name: 'session',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.session,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i6.Version?>(
      name: 'sinceSdkVersion',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.sinceSdkVersion,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i3.Source?>(
      name: 'source',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.source,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i3.Source?>(
      name: 'librarySource',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.librarySource,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, bool>(
      name: 'isConstantEvaluated',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isConstantEvaluated,
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i8.DartObject?>(
      name: 'computeConstantValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.computeConstantValue(),
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
    _i1.ReflectSingleProperty<_i2.VariableElement, _i2.Element?>(
      name: 'thisOrAncestorOfType',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.thisOrAncestorOfType(),
    ),
  ]),
  _i1.ReflectItem<_i8.DartObject>(properties: [
    _i1.ReflectSingleProperty<_i8.DartObject, bool>(
      name: 'hasKnownValue',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hasKnownValue,
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, bool>(
      name: 'isNull',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.isNull,
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, _i7.DartType?>(
      name: 'type',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.type,
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, _i2.VariableElement?>(
      name: 'variable',
      isCore: false,
      isViewable: true,
      isMethod: false,
      getter: (object) => object.variable,
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, int>(
      name: 'hashCode',
      isCore: true,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.hashCode,
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, Type>(
      name: 'runtimeType',
      isCore: false,
      isViewable: false,
      isMethod: false,
      getter: (object) => object.runtimeType,
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, bool?>(
      name: 'toBoolValue',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toBoolValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, double?>(
      name: 'toDoubleValue',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toDoubleValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, _i2.ExecutableElement?>(
      name: 'toFunctionValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.toFunctionValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, int?>(
      name: 'toIntValue',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toIntValue(),
    ),
    _i1.NullableReflectIterableProperty<_i8.DartObject, _i8.DartObject>(
      name: 'toListValue',
      isCore: false,
      isViewable: true,
      isMethod: true,
      getter: (object) => object.toListValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject,
        Map<_i8.DartObject?, _i8.DartObject?>?>(
      name: 'toMapValue',
      isCore: false,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toMapValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, Set<_i8.DartObject>?>(
      name: 'toSetValue',
      isCore: false,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toSetValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, String?>(
      name: 'toStringValue',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toStringValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, String?>(
      name: 'toSymbolValue',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toSymbolValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, _i7.DartType?>(
      name: 'toTypeValue',
      isCore: false,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toTypeValue(),
    ),
    _i1.ReflectSingleProperty<_i8.DartObject, String>(
      name: 'toString',
      isCore: true,
      isViewable: false,
      isMethod: true,
      getter: (object) => object.toString(),
    ),
  ]),
];
